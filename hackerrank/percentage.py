import copy
from enum import Enum

def plusMinus(arr):
    arr_len = len(arr)
    neg = sum(1 for i in arr if i < 0)
    zir = sum(1 for i in arr if i == 0)
    pos = arr_len - neg - zir

    print("%.6f" % (pos / arr_len), "%.6f" % (neg / arr_len), "%.6f" % (zir / arr_len))
    ret = ["%.6f" % (pos / arr_len), "%.6f" % (neg / arr_len), "%.6f" % (zir / arr_len)]
    print(ret, type(ret))
    return 0


def test_plusMinus():
    assert plusMinus([-4, 3, -9, 0, 4, 1]) == 0  # [0.500000, 0.333333, 0.166667]


def timeConversion(s):
    if s == "12:00:00AM": return "00:00:00"
    if s == "12:00:00PM": return "12:00:00"
    if s.endswith("AM"): return s[:-2]
    hr, mn, sec = s.split(":")
    hr = str(int(hr) + 12)
    return f"{hr}:{mn}:{sec[:2]}"


def test_time_conversion():
    st = "07:05:45PM"
    print(timeConversion(st))


from typing import List
def lonely_integer(nums: List[int]):
    for _, v in enumerate(nums):
        if nums.count(v) == 1:
            return v


def diagonal_difference(nums: List[List[int]]):
    print()
    lng = len(nums)
    sum_main_dig = 0
    sum_second_dig = 0
    for i in range(lng):
        sum_main_dig += nums[i][i]
        sum_second_dig += nums[i][lng - 1 - i]
    return abs(sum_main_dig - sum_second_dig)


def test_diagonal_difference():
    assert diagonal_difference([[1, 2], [3, 4]]) == 0


def counting_sort(arr):
    ref = [0] * (max(arr)+1)
    for v in arr:
        ref[v] += 1
    return ref


def test_counting_sort():
    assert counting_sort([1, 1, 3, 2, 1]) == [0, 3, 1, 1]


"""
Sean invent. a game involving a 2n X 2n matrix where each cell of the matrix contains an integer. 
He can reverse any of Its rows or columns any number of times. The goal of the game is to maximize the sum of the 
elements In the n X n submatrix located In the upper-left quadrant of the matrix. Given the Initial configurations for 
q matrices, help Sean reverse the rows and columns of each matrix in the best possible way so that the sum of the 
elements In the matrix's upper-left quadrant Is maximal. Example matrix = [[1,2], [3,4]] 
it is 2 x 2 and we want to maximize the top left quadrant, a 1 x 1 matrix. Reverse row 1: 
And now reverse column Or 
The maximal sum is 4. Function Description Complete the flipping.trix.nctIon In the etlttor below. flippingbilatrix 
has the following parameters: - int matrixt2nNnp a 2-dimensional array of integers Returns - the maximum sum possible. 
"""


def flippingMatrix(matrix):
    n = len(matrix) // 2
    max_sum = 0

    for i in range(n):
        for j in range(n):
            max_sum += max(
                matrix[i][j],                     # Original element
                matrix[i][2 * n - j - 1],         # Row reversed element
                matrix[2 * n - i - 1][j],         # Column reversed element
                matrix[2 * n - i - 1][2 * n - j - 1]  # Both row and column reversed element
            )

    return max_sum

def test_flipping_matrix():
    assert flippingMatrix([[107, 54, 128,  15],
                            [ 12, 75, 110, 138],
                            [100, 96,  34,  85],
                            [ 75, 15,  28, 112]]) == 488


def findZigZagSequence(a, n):
    a.sort()
    mid = int(n/2)
    a[mid], a[n-1] = a[n-1], a[mid]

    st = mid + 1
    ed = n - 2
    while(st <= ed):
        a[st], a[ed] = a[ed], a[st]
        st = st + 1
        ed = ed - 1

    for i in range(n):
        if i == n-1:
            print(a[i])
        else:
            print(a[i], end = ' ')
    return


def test_findZigZagSequence():
    findZigZagSequence([1, 2, 3, 4, 5, 6, 7], 7)


class Players(Enum):
    ONE = 1
    TWO = 2


def number_pairs(num):
    pairs = [(num1, num - num1) for num1 in range(1, int(num // 2) + 1) if not num % num1]
    mindiff = None
    for x, y in pairs:
        if not mindiff or abs(x - y) < abs(mindiff[0] - mindiff[1]):
            mindiff = (x, y)
    return mindiff


def tower_breaker(n: int, h: int):
    towers = [h] * n
    player = Players.ONE
    while True:
        highest_tower = max(towers)
        if highest_tower == 1:
            return 2 if player == Players.ONE else 1
        highest_tower_idx = towers.index(highest_tower)
        next_move = number_pairs(highest_tower)
        if not next_move:
            return 2 if player == Players.ONE else 1
        else:
            towers[highest_tower_idx] -= next_move[1]
            player = Players.TWO if player == Players.ONE else Players.ONE


def test_tower_breaker():
    # assert tower_breaker(2, 6) == 2
    assert tower_breaker(1, 4) == 1
    # assert tower_breaker(2, 2) == 2


def is_palindrome(s: str):
    for i, ch in enumerate(s):
        if ch != s[len(s)-1-i]:
            return False
    return True


def remove_ch(s: str, i: int):
    if i == len(s)-1:
        return s[:len(s)-1]
    return s[:i] + s[i+1:]


def palindrome_index(s: str):
    if not s or len(s) < 2 or is_palindrome(s):
        return -1
    len_alphas = len(s)
    for i, ch in enumerate(s):
        if ch != s[len_alphas-1 - i]:
            if is_palindrome(remove_ch(s, i)):
                return i
            elif is_palindrome(remove_ch(s, len_alphas-1 - i)):
                return len_alphas-1 - i


def test_palindrome_index():
    assert palindrome_index("aaab") == 3
    assert palindrome_index("baa") == 0
    assert palindrome_index("aaa") == -1


def grid_challenge(grid: List[List[str]]):
    for idx, row in enumerate(grid):
        grid[idx] = "".join(sorted(row))

    for i in range(len(grid[0])):
        col = [row[i] for row in grid]
        if not sorted(col) == col:
            return "NO"
    return "YES"


def test_grid_challenge():
    grid = ['ebacd', 'fghij', 'olmkn', 'trpqs', 'xywuv']
    assert grid_challenge(grid) == "YES"


def super_digit(n: str, k: int):
    print()
    snum = n
    while len(snum) > 1:
        snum = str(sum(int(i) for i in snum))
    snum = str(int(snum) * k)
    while len(snum) > 1:
        snum = str(sum(int(i) for i in snum))
    print(int(snum))
    return int(snum)


def test_super_digit():
    assert super_digit("2365978831649490136475575038877779575813226775851820912370812124502641538947920808397703549713678494683928497712437176140282589350277653479225520602813456433277417366680426198633681891184348757007292907409160353745221125354212095528784124728447770959861439390350308313917365021363541712618686942946773324003146008424205688630371656757561012224744901800726911246423272186301595490993253791386102270201965996662707215300748516732223935858816466886068592299708740453558018878677753623653080545592459765998008028026982510689469213738241205802446029154833458048894002646934119082621498341445221491190955459548371083839625590505228681017724678315572531551988758568150699821635779156685637531274097856486075649357610713833072735231599919848220063026429718137766286716343385059699133211699189933339174843625266398503099203416124466032711453854413933737536836406105991857744766344461162222670876732729171585512468615558499979720269427922798431312270483732004392503905160233457811525428432787732543799783309593536386190295516419339222642886780012683583264436427241020490358960438948951090123073035203797984302163150042110707217274102457735317367100133807782064391421012191958312396649052833396257876824943425814834615313474161638240747120342368147351931074481983318414461554116111216672594256301273113776892080967125790153125125885441941114178586071406149630777323200516190208241341822285244325578953416388462284725673478766919050744786263188733438572307443267700831425575113213359873223948072988922668251652320316884761627830570057061821492039968369341602081382603302965910382997241199808824091331180464950187035576778206683245316006405529597170652549163351875206280564448346510252775085876212617353369513619186390565654064068546863018765466029315754619416429621887091818939474391383675337791979997519954871635692656223852981330368145996344325688247632566665645262588764650823901065646663460851602833982853795901687202035893967893724362979886948663369428689585509715442019662325024294581705265808022570365351645495802686891955348084550615538750809287498241260408673517746608582833123696027380353038348218786331710334697053069152326732702246704177127367642287975998486114018970510842276024855162228267767755948030029723573646908844109049374244456580474922058250964260437721278380069311972455077102266167098465788845261016395772392904280411167763443571285141388567074805986331207454652671618663858701085276806486000014124900483188940484497173286284987124699515039831183902383877120136788492339903316093693938833730548247174799553092402671083313285813003903363625219370039413610850308966558948057932583576771492037811460439359542902624599661588624295232252616245186844975995180218889230403968087888108494214819234992007182241562844376961711438491105585390645332161544542326095869642445733823661806228697208277656426326128938546125761166960351482948539114133280810916317873360419836067625116114001377672929333638768292095236809153349426894896869446197395671771932928211109385884940274160388152027885130001908095515987519207099973668415699818805100890690896126345099249836616348702742776559368591004254298734292430313132506862931339852599450961120591169865484036943294045257801193102728400887526383477970523720630900867795111210451854194391002244150921934506879640791680297603712618076174694948300699937409787596860516266369711284028834238022724596540529491965656156574337073988564171171562036245389632730259264953520190321920347601255396137920500496074443380910841069973360586715775083998842187392360751892748665579312212647821816086677544702037289983388842777905728540745718314922321086695691823249801139552886748181144717500999021690749662561227798159566905725946118195067702032931332172088385727012140744362147720922176656204772910422189621466379287662792372374145383317294646977085291873933547226857758530880168793511465268400187943977613894365634645591604177130794105552582447385631392788652188052953414781129655671439788151513996304231024358843023105354157338564270003904673736178109502550650713167258319522545824056524791781105181639237127875356417268878249642171688744070159985867211941494396566216365392991627962886902198712613982017603237174682825814797983967054038269833008728407345912699623004623467287738296110774212005294050799218227654983820235796069236099706911525806244933683548619651925300435846989868138976944006822652462513903624200398184640627878400159480147462063679751851193719499676402496701528971830054482832320057097082360875809145428036636600549270698504540758319126452884313155162288201445118708935758033035083555929081756050975974040793712887964439001525986626643925845343840647344753344394209812309532147589135665638895095150172324875219965305745649692175878476631167339609984047545458299489650202318886162798841051758853022389219423402386031324398337411422060786064174337895040820526914615325075313448800789763344707190242881920892579588963376086146960633381215378914452523108903834607764477580583821712879080194987840450703336371649758616364805184545636558639909806705757141231728890945705281578891764357530862478284617890886615612608017861029342475376559517893073874528735689724989147963227442563141916115837740823088920018306622898786665697436694114134566032298418513134640110497915781256013658157626876007303865007938799121914067544773285391447059337068967640221461662745594510968605338966108977317081902507941847885331172633986644666002196037962414608353479436996966565895587993028389782659415971152403029518493019029205611785920255633270560095438637318885230551138363908343081523545591224134467205438637992783829259919217744713264231649621461535887435410548366408012977973203459983761967831442350892580662433295719596302715165438994052920660204857279403439598616231631708579334309451829396365207336409446940374623441420435439989058506571776629533788131454314121504595268258657172190365178279637763408587826711292793610001999656837923788319438384372260168303662843086203813103771712423574817520332644704407707584630263836497460974781867543909787940278207946350316762434685271126547340568379697114143432270663747926423410939366867323227307888313764100323948708488249291932762190879422500980573314510481474989813161818046596342997489244092851481456635241462079248335760582513488928151459281907438730238065382341691833250917737617330046824951709287812847967496061820848573006896422220098029186444659696393722864425443174804115295661452095886127784785656396807536597522937517010395385281668735072368362229248386090765688300603292905737705424037244946746445640174635429078019229973366378415273692915764515173009646632256826278792193749314522687455317800604524740119271772480341422364037622841158408693597798800732407214231715176216414119458470398433698630492023148912788371335047944731850924533486580463894436416946298869397354691924065211837844914014837056117850937923852135361875895012428779496342389871713463333419295329258828037504468306416370691252321110783303933730724981220411655523128107813025668960480700236419568269112404054054013255954297124592253625509027169128346186086879842249233969016492009074059375814396213470661585889025858173286307393463166771278528359358679107663618852904436981159408575155381452852538538161326799566605463071606829507721627760695695298663348037499346965080571845983286426728562771057921340809114888275207834276278723670038713251819678117637307797126524335451875674322135660001938501046206646725087020563845482789165114015140237476770960542212541262365674096922377749965211055083880951870947588439313087505990968967904452943561444336754539161497904651842954423690339860136920316455021978105823558793189756025331264642326253916951167641064028719315782248353333706214902160610987866723541787809188383034860801960339654982067421224921066723519523759569071993168783868197116308035921525346492767986090665094574147296651701824963729081365854249511700896706324052098265362182297874817162325372836249682033460453106454759294279011517085352648052686287835826956331856000530656816094258663224239727567999798475939204052755892731997428948369450364798425229576414764799300949556003266863462364785971588403993047829919672884685002127952124093077144535644623315342420032186819555104280110883937594970132297831017511120535205810256141119655336117669459771376005411248881994640753601606805393583940281645304757423903447751752383876356426048210439751541893763188890403792485964646286690953432929961087972625329578244854544295899075470411907779181886987220577672224785177419791954783277253421243333498197370278143247403594312138218592254174197047846302000164735966226394070001204323764164912690541799927573761616438820835021411743898829210130296149250887986491553547221899402096605456148489590866922112294624680546281250567297009605663936998939340731539740128008013832941045470722922727419033890751091173021386847464099733717633316304536930447077599861319788266450790785072377536483225439587367122393671167950836029510856465462738804587713268436992128892171509071641161165880608224322539890931445909082786991260734902410993863449929626354001121991398640542747424891140797115509495342486678389565402504229791244504867508301342798992744796454984189142033193018659744179186808244403688375727771580862592404226696538971232713170205127941869698531179001250635892043048835137445218382957976989721755706861701366347894376710532041643279157597459032202591566808167568419301491754821992741943996185368155017334681412500723160011387595363158410560488203993638466615700276165502049790282263414502568166837301414930688269694553727263733690839349714652132206285243796184219815308355634318194592022805870387606542297381666905458451054204419608774066516116961329031388338821535694456637910702328420582124442440139995352494707284230907975581024232726130673375360163257154562557607055131368534412734263401317160921075802949888891100336188281116884460133424076740001934250575466042922149519629860344218277351996828116545149383178424384811799946144322536711027462093434842033767504492071349955677051700618860129870409856113128392373584622061075886499407885141951318807519645386474", 100000) == 7


def minimum_bribes(q):
    bribes = 0

    for i in range(len(q)):
        if q[i] - (i + 1) > 2:
            print("Too chaotic")
            return "Too chaotic"

    for i in range(len(q)):
        for j in range(i, -1, -1):
            if q[j] > q[i]:
                bribes += 1

    print(bribes)
    return bribes


def test_minimum_bribes():
    # assert minimum_bribes([2, 1, 5, 3, 4]) == 3
    assert minimum_bribes([2, 5, 1, 3, 4]) == "Too chaotic"
    assert minimum_bribes([1, 2, 5, 3, 7, 8, 6, 4]) == 7



"""
truckTour:
Suppose there Is a circle. There are N petrol pumps on that circle. Petrol pumps are number.° to (N — 1)(1.11 Inclusive).
You have.. pieces of information corresponding to each of the petrol pump: 1. amount of petrol Mat particular petrol 
pump will give, a. 2 the distance from that petrol pump.. next petrol pump. ingIally, you have a tank of inf.ft capacity 
carrying no petrol. You can start the tour at any of the petrol pumps. Calculate the first point from where the truck 
will be able to complete the circle. Consider that the truck will stop at each of the petrol pumps. The truck will move
one kilometer for each Iitre of the petrol.

Input Format:
    The first line will contain the value of N. The next N Imes. contain a pair of Integers each, 
    1. the amount of petrol that petrol pump will give and 
    2. the distance between that petrol pump and the next petrol pump. 

Constraints: 1 < N 106 1 < amount of petrol, distance < 10') Output Format An integer 
which will be the smallest I.ex of the petrol pump from which we can start the tour. Sample Input 
1.53 
Sample Output 

"""


def truckTour(petrolpumps):
    surplus = [p - d for p, d in petrolpumps]
    sum = 0
    start_idx = 0
    for idx, v in enumerate(surplus):
        sum += v
        if sum < 0:
            sum = 0
            start_idx = idx + 1

    return start_idx


def test_truckTour():
    assert truckTour([[1, 5],
                      [10, 3],
                      [3, 4]]) == 1
    assert truckTour(
        [[46675, 40604], [95711, 49370], [25140, 76805], [60012, 40610], [31614, 56881], [50925, 44485], [47175, 43587],
         [63060, 29117], [61010, 88932], [70365, 84445], [20001, 26058], [50394, 81703], [40616, 89895], [18867, 21111],
         [51417, 55195], [63251, 14443], [95798, 75313], [80164, 37289], [68470, 40175], [94251, 16435], [13407, 45175],
         [77272, 60581], [88762, 40331], [6050, 66123], [29262, 76414], [50567, 65615], [18823, 960], [47317, 75790],
         [7206, 82535], [13253, 74974], [54082, 92855], [5769, 66231], [68168, 85932], [3520, 36637], [26107, 14122],
         [69423, 55865], [59296, 46694], [32798, 64409], [87024, 38847], [46884, 16286], [31612, 97450], [98252, 66787],
         [14762, 61920], [42576, 38319], [60806, 72180], [13293, 14887], [65035, 19061], [81118, 33202], [21344, 989],
         [86190, 63802], [15110, 55612], [19667, 90757], [2306, 52464], [71518, 5681], [7662, 18401], [38318, 39273],
         [15850, 36569], [22411, 46963], [98488, 81339], [85282, 59294], [53518, 14926], [90532, 18552], [50338, 71649],
         [68105, 71681], [88989, 54294], [35483, 20450], [26258, 71501], [11207, 44915], [23964, 82724], [50595, 47977],
         [17476, 88913], [3601, 33325], [41833, 26012], [96640, 40321], [7350, 81921], [15966, 60867], [96846, 6497],
         [95771, 47183], [94498, 63875], [35215, 83486], [34521, 70697], [3936, 60778], [42197, 31494], [22044, 82512],
         [30569, 88990], [46840, 48044], [94254, 50441], [97720, 36087], [76452, 94359], [92759, 153], [92631, 8724],
         [77371, 89476], [31572, 89493], [53010, 26069], [53368, 88225], [25907, 4240], [75273, 46194], [65017, 33822],
         [77687, 3412], [32685, 24607], [92401, 79525], [89002, 86655], [29965, 86721], [39093, 22768], [97432, 31851],
         [39272, 90062], [56926, 32994], [95890, 88497], [22487, 48899], [30918, 75854], [53475, 56824], [80093, 28748],
         [3017, 61461], [62569, 97055], [81224, 95253], [21661, 73624], [74777, 10662], [76630, 21093], [13734, 15722],
         [43860, 11165], [63924, 99483], [1227, 37201], [32477, 97116], [42050, 54963], [62366, 72967], [47168, 15841],
         [29790, 43612], [44588, 32806], [21424, 7156], [29860, 2647], [18760, 67872], [92622, 9889], [78533, 69252],
         [30981, 92266], [1325, 91193], [3431, 81601], [90675, 21009], [18801, 39503], [34476, 77202], [94465, 96841],
         [50168, 57984], [12681, 79957], [1595, 57268], [29114, 39370], [80775, 75325], [42016, 15887], [43196, 34638],
         [25775, 38080], [20241, 56755], [46698, 37917], [64299, 50128], [19517, 71326], [87488, 54670], [10828, 21963],
         [31871, 21645], [18803, 98391], [79628, 47836], [94699, 97575], [21455, 40165], [36944, 2230], [15489, 95312],
         [34468, 75037], [29949, 60242], [13116, 66541], [33348, 76165], [4457, 97647], [26292, 40326], [85324, 30131],
         [11347, 96151], [52093, 59569], [34147, 87248], [57959, 30127], [35083, 52658], [44053, 72889], [9174, 80996],
         [75118, 24662], [92659, 25937], [16050, 38959], [86178, 45518], [5499, 19526], [21682, 26308], [33524, 64326],
         [66633, 18847], [94456, 77979], [31349, 62901], [37547, 65496], [66500, 11858], [95622, 17934], [80867, 39674],
         [90822, 90040], [37021, 82292], [31053, 29680], [8228, 63455], [84990, 94406], [8972, 90489], [30283, 47005],
         [16796, 80158], [11330, 99780], [15356, 22138], [94110, 46704], [85038, 48008], [28551, 67889], [59865, 40524],
         [85822, 57083], [96549, 76643], [47122, 49922], [58934, 94527], [95953, 67162], [57981, 80942], [77919, 66952],
         [87782, 24553], [13956, 4577], [4710, 41638], [20708, 20065], [63775, 14817], [83120, 65164], [62825, 11671],
         [33052, 39041], [68546, 35225], [96124, 65095], [28219, 59597], [31368, 87153], [54123, 27320], [70666, 12103],
         [8261, 64936], [95406, 96043], [89488, 25714], [16971, 94197], [67351, 37679], [30613, 47477], [68847, 13732],
         [28992, 31671], [41754, 78395], [70712, 10300], [13619, 66835], [91746, 41837], [26431, 23113], [45341, 96906],
         [50432, 32358], [9008, 75044], [97293, 20766], [71086, 86780], [46479, 4409], [80976, 30181], [58439, 11588],
         [94009, 27285], [41672, 23000], [58956, 83425], [1394, 46019], [93724, 31364], [29205, 85469], [89552, 71987],
         [8581, 34893], [68892, 75364], [67250, 94252], [50408, 80895], [31369, 37845], [67674, 77847], [58605, 65002],
         [24379, 17043], [92941, 18387], [44328, 34612], [57738, 19635], [18037, 75483], [82005, 28112], [23198, 11209],
         [29933, 12749], [99547, 54865], [63993, 68439], [46581, 47595], [79042, 96988], [28489, 10410], [51184, 96162],
         [4608, 9789], [61163, 45338], [26831, 70456], [63724, 87510], [5067, 37813], [23496, 39455], [13295, 5500],
         [83919, 36492], [33060, 13851], [65592, 32607], [85067, 29585], [17397, 31647], [77179, 12790], [28634, 22019],
         [39551, 96170], [18180, 44158], [5958, 95695], [89495, 49140], [66150, 69570], [53002, 87568], [23734, 76497],
         [27023, 37028], [98349, 27293], [89871, 31408], [41143, 55462], [80366, 42561], [85046, 97762], [74208, 78576],
         [26903, 19193], [594, 66453], [15362, 35126], [26962, 37671], [47172, 16456], [86811, 29673], [2377, 39812],
         [17240, 26110], [32660, 60614], [79489, 31008], [87906, 69359], [62416, 45400], [41173, 59133], [87961, 42570],
         [56895, 78520], [21146, 149], [14064, 38091], [66602, 29426], [89568, 93563], [83448, 53091], [26371, 70258],
         [82763, 45099], [26421, 16355], [71209, 59081], [76968, 67049], [6440, 81226], [52760, 68855], [42977, 93932],
         [44340, 47289], [36501, 17586], [25808, 73998], [17734, 39872], [28441, 84335], [85649, 18008], [94250, 69096],
         [87451, 20620], [55706, 70213], [82070, 98478], [2919, 69630], [57558, 96239], [36679, 80350], [77464, 89438],
         [65556, 20440], [83369, 9895], [84081, 36221], [27480, 9888], [10219, 45214], [66111, 38659], [45900, 51759],
         [73018, 40149], [37207, 60468], [77120, 92912], [47033, 75542], [91389, 49951], [45171, 65299], [46189, 81849],
         [45648, 40004], [71286, 11203], [76796, 71006], [21098, 60876], [7227, 64929], [70763, 17445], [10142, 53226],
         [72455, 56042], [4984, 61824], [12542, 42190], [38644, 6014], [51453, 85676], [81555, 59194], [51978, 26725],
         [24492, 98167], [24926, 86491], [38170, 12563], [14045, 31317], [83569, 51494], [92192, 90795], [16423, 79307],
         [24591, 26564], [32532, 13397], [98957, 37515], [75220, 27851], [96057, 13863], [50216, 63861], [99538, 48122],
         [23054, 51516], [74846, 63897], [66034, 16123], [50387, 20555], [28686, 64432], [51872, 12254], [32277, 44063],
         [19400, 48699], [23369, 43990], [91615, 55900], [57386, 90571], [9767, 48957], [34773, 22175], [62820, 84988],
         [86035, 78709], [49461, 9089], [30224, 40659], [72985, 12609], [56781, 39724], [33164, 85466], [20507, 1387],
         [14071, 52783], [45449, 33470], [1482, 85170], [93811, 93096], [57421, 67548], [18, 83539], [16505, 51143],
         [5713, 79324], [52482, 91748], [58032, 1943], [17188, 4608], [42601, 90172], [33568, 15733], [46247, 66731],
         [1199, 66753], [68117, 15269], [19536, 29918], [65091, 37369], [31439, 58901], [46816, 88859], [26449, 63185],
         [72398, 59305], [14327, 94462], [38628, 83161], [2561, 13011], [1455, 19748], [33970, 44055], [9920, 67538],
         [76139, 56166], [50620, 77337], [39271, 35089], [8958, 58806], [81358, 90400], [12526, 12796], [49300, 59341],
         [18006, 92100], [38877, 6755], [67756, 53204], [1217, 22735], [52716, 3777], [35746, 54170], [23525, 86067],
         [14576, 49796], [53604, 90714], [22313, 20576], [84403, 77935], [55664, 93360], [53092, 53373], [83759, 65617],
         [66168, 49410], [41309, 84173], [57862, 80186], [7280, 25617], [49741, 8496], [48352, 2456], [28624, 449],
         [56625, 68500], [86515, 87552], [34647, 56471], [78265, 73312], [77046, 62667], [51246, 49061], [72378, 4338],
         [2433, 72488], [86306, 84952], [21898, 27615], [85476, 96111], [7800, 92755], [38079, 57540], [17602, 86430],
         [76347, 46226], [3230, 49323], [31077, 6097], [36874, 82076], [62567, 15138], [55387, 55964], [94157, 22984],
         [21376, 66534], [43673, 23808], [39022, 29979], [25111, 77271], [73945, 10586], [89733, 81744], [3341, 27811],
         [55635, 20942], [30593, 31981], [83519, 33822], [97655, 30948], [39918, 34528], [13023, 18836], [66017, 68409],
         [91151, 60173], [7744, 12526], [43059, 51417], [52685, 98432], [97747, 77795], [75702, 71691], [88381, 81786],
         [69786, 8073], [9596, 25420], [29014, 56540], [73752, 28885], [90362, 71406], [59832, 46631], [22285, 72854],
         [81819, 88301], [57614, 72969], [64826, 81709], [85495, 7884], [33125, 54531], [6315, 30871], [32326, 98368],
         [18913, 37058], [96505, 88698], [45130, 6100], [14117, 74143], [62640, 4220], [19379, 69353], [91977, 79210],
         [32335, 14261], [68415, 30505], [18914, 42380], [3474, 83739], [24089, 5320], [7974, 73565], [59850, 14288],
         [4436, 8527], [29007, 39700], [45584, 25511], [28398, 90713], [47962, 58866], [81208, 26953], [63086, 586],
         [12657, 55062], [96148, 61344], [85675, 80914], [91848, 4588], [23294, 11673], [88326, 47382], [16992, 96299],
         [37298, 93194], [26938, 58085], [1720, 72296], [97785, 47304], [14158, 26182], [54368, 78471], [85047, 35575],
         [5424, 48132], [36161, 34432], [19546, 48660], [95775, 5220], [29573, 3975], [9807, 69218], [15647, 14484],
         [32951, 48991], [10782, 70249], [42184, 54071], [28333, 60255], [26366, 26117], [23910, 40523], [52298, 78278],
         [18993, 37345], [13852, 40768], [1828, 66364], [75200, 37725], [15023, 87326], [42944, 60948], [91300, 69102],
         [30165, 23299], [83585, 63116], [72289, 94366], [33364, 14472], [64788, 61696], [74726, 91153], [87813, 14988],
         [48027, 56462], [93265, 83372], [93806, 7116], [40491, 11986], [89832, 32042], [49710, 4854], [19368, 9006],
         [82153, 27019], [78107, 12318], [50317, 61692], [75433, 22605], [72409, 8796], [53428, 53549], [86843, 44506],
         [44701, 74655], [59493, 9080], [47469, 52757], [92451, 57626], [76224, 32941], [69611, 66055], [64983, 35673],
         [87261, 702], [44678, 69413], [44072, 39136], [81730, 94389], [17179, 73514], [33345, 89588], [98661, 3125],
         [43136, 85504], [47630, 4188], [76510, 7122], [13267, 23978], [76230, 22069], [81604, 52453], [71362, 67566],
         [34860, 52696], [3238, 22120], [53397, 64267], [7884, 97468], [3403, 5966], [8208, 20581], [79479, 57905],
         [26520, 78140], [61029, 86007], [79995, 8658], [6547, 72856], [32131, 36165], [96834, 8360], [58234, 94789],
         [77164, 45947], [78706, 28375], [98642, 98296], [66846, 68390], [78914, 74730], [82209, 98668], [80695, 90417],
         [19249, 76525], [48321, 62120], [71016, 9349], [64479, 51010], [34358, 71025], [40218, 66488], [23541, 53403],
         [91199, 98126], [48191, 84714], [44072, 43248], [13089, 42713]]) == 573


class SinglyLinkedListNode:
    def __init__(self, data):
        self.data = data
        self.next = None


def mergeLists(head1, head2):
    if not head1 and not head2:
        return None
    if not head1:
        return head2
    if not head2:
        return head1
    if head1.data < head2.data:
        tmp = SinglyLinkedListNode(head1.data)
        tmp.next = mergeLists(head1.next, head2)
    else:
        tmp = SinglyLinkedListNode(head2.data)
        tmp.next = mergeLists(head1, head2.next)
    return tmp

def test_mach():
    link1 = SinglyLinkedListNode(1)
    link1.next = SinglyLinkedListNode(3)
    link1.next.next = SinglyLinkedListNode(7)
    link2 = SinglyLinkedListNode(1)
    link2.next = SinglyLinkedListNode(2)

    merged = mergeLists(link1, link2)
    while merged:
        print(merged.data)
        merged = merged.next

